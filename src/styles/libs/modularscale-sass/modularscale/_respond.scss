@mixin step($mode: map-get($settings, respond)) {
  // Setup
  $id: #{unique-id()};
  $max: 0;
  $queries: 0;
  $c: 0;
  $query: $mode;

  // Default query type
  @if ($query ==null) {
    $query: typetura;
  }

  // Find maximum value
  @each $bp in $settings {
    @if (type-of(list.nth($bp, 1))=="number") {
      $max: list.nth($bp, 1);
      $queries: $queries + 1;
    }
  }

  // Write fallback styles to broader context
  @content ($settings);

  // Typetura styles
  @if ($query ==typetura) {
    --tt-key: #{$id};
    --tt-max: #{unitless($max)};

    @keyframes #{$id} {
      @each $bp in $settings {
        @if (type-of(list.nth($bp, 1))=="number") {

          $key: list.nth($bp, 1);
          $keyframe: percentage(math.div($key, $max));

          #{$keyframe} {
            @content (list.nth($bp, 1));
          }

          $c: $c + 1;
        }
      }
    }
  }

  @else if ($query ==container) {
    $query: $query + ' modularscale';

    // Loop through breakpoints
    @each $bp in $settings {
      @if (type-of(list.nth($bp, 1))=="number") {
        @#{$query} (min-width: #{list.nth($bp, 1)}) {
          $bp: list.nth($bp, 1);
          @content ($bp);
        }
      }
    }
  }

  @else {

    // Loop through breakpoints
    @each $bp in $settings {
      @if (type-of(list.nth($bp, 1))=="number") {
        @#{$query} (min-width: #{list.nth($bp, 1)}) {
          $bp: list.nth($bp, 1);
          @content ($bp);
        }
      }
    }

  }
}

@mixin container($selector: '.modularscale') {
  @at-root {
    #{$selector} {
      container-name: modularscale;
      container-type: inline-size;
    }

    $container-write: true;
  }
}