// Convert number string to number
@function to-num($n) {
  $length: string.length($n);
  $return: 0;
  @for $i from 1 through $length {
    $return: $return * 10;
    $value: string.slice($n, $i, $i);
    @if ($value == "0") {
      $return: $return + 0;
    }
    @if ($value == "1") {
      $return: $return + 1;
    }
    @if ($value == "2") {
      $return: $return + 2;
    }
    @if ($value == "3") {
      $return: $return + 3;
    }
    @if ($value == "4") {
      $return: $return + 4;
    }
    @if ($value == "5") {
      $return: $return + 5;
    }
    @if ($value == "6") {
      $return: $return + 6;
    }
    @if ($value == "7") {
      $return: $return + 7;
    }
    @if ($value == "8") {
      $return: $return + 8;
    }
    @if ($value == "9") {
      $return: $return + 9;
    }
  }
  @return $return;
}

// Find a ratio based on a target value
@function target($t, $b) {
  @if (list.length($b) > 1) {
    @error "You are currently using multiple bases in your modular scale: #{$b}. When targeting a value for your ratio, please use a single base.";
  }
  // Convert to string
  $t: $t + "";
  // Remove base units to calulate ratio
  $b: unitless(nth($b, 1));
  // Find where 'at' is in the string
  $at: str-index($t, "at");

  // Slice the value and target out
  // and convert strings to numbers
  $v: to-num(str-slice($t, 0, $at - 1));
  $t: to-num(str-slice($t, $at + 2));

  // Solve the modular scale function for the ratio.
  @return math.pow(math.div($v, $b), math.div(1, $t));
}
